generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  phone     String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  addresses Address[]
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Address {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  street    String
  city      String
  state     String
  zipCode   String  @map("zip_code")
  country   String
  isDefault Boolean @default(false) @map("is_default")

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")

  @@map("addresses")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  slug        String  @unique
  isActive    Boolean @default(true) @map("is_active")
  parentId    String? @map("parent_id")

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id            String  @id @default(cuid())
  name          String
  description   String
  price         Decimal @db.Decimal(10, 2)
  sku           String  @unique
  inventory     Int     @default(0)
  images        String[]
  brand         String?
  specifications Json?
  isActive      Boolean @default(true) @map("is_active")
  categoryId    String  @map("category_id")
  averageRating Decimal @default(0) @db.Decimal(3, 2) @map("average_rating")
  totalReviews  Int     @default(0) @map("total_reviews")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Order {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  status            OrderStatus   @default(PENDING)
  totalAmount       Decimal       @db.Decimal(10, 2) @map("total_amount")
  shippingCost      Decimal       @default(0) @db.Decimal(10, 2) @map("shipping_cost")
  taxAmount         Decimal       @default(0) @db.Decimal(10, 2) @map("tax_amount")
  paymentIntentId   String?       @map("payment_intent_id")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  shippingAddressId String        @map("shipping_address_id")
  notes             String?
  trackingNumber    String?       @map("tracking_number")
  estimatedDelivery DateTime?     @map("estimated_delivery")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  name      String
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
  image     String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  productId  String   @map("product_id")
  rating     Int      @db.SmallInt
  title      String?
  comment    String?
  isVerified Boolean  @default(false) @map("is_verified")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
